qr-attendance/
│
├── backend/
│   ├── server.js                 # Express server setup
│   ├── config/
│   │   └── db.js                 # MongoDB connection
│   ├── controllers/
│   │   ├── authController.js     # Operator & HR login
│   │   ├── adminController.js    # Admin login & admin-specific actions
│   │   ├── userController.js     # Register users, manage users
│   │   └── attendanceController.js  # Mark attendance, fetch logs
│   ├── routes/
│   │   ├── authRoutes.js         # Operator/HR login
│   │   ├── adminRoutes.js        # Admin login
│   │   ├── userRoutes.js         # CRUD users
│   │   └── attendanceRoutes.js   # Mark attendance, view logs
│   ├── middleware/
│   │   ├── roleMiddleware.js     # Protect routes based on roles
│   │   └── uploadMiddleware.js   # Multer setup for profile pics
│   ├── models/
│   │   ├── User.js               # Employees (Operator, HR, User)
│   │   ├── OfficeMember.js       # Admin accounts
│   │   └── Counter.js            # For auto-generating User IDs
│   ├── uploads/
│   │   └── profile_pics/         # Store uploaded images
│   └── package.json
│
├── frontend/
│   ├── public/
│   │   └── index.html
│   └── src/
│       ├── index.js
│       ├── App.js
│       ├── styles/
│       │   └── index.css         # Tailwind CSS
│       ├── components/
│       │   ├── Navbar.js
│       │   ├── Sidebar.js
│       │   ├── UserCard.js
│       │   ├── QRScanner.js
│       │   └── ProfilePicture.js
│       ├── pages/
│       │   ├── Login.js          # Operator & HR login
│       │   ├── AdminLogin.js     # Admin login
│       │   ├── Dashboard.js
│       │   ├── Users.js
│       │   ├── RegisterUser.js
│       │   ├── Attendance.js
│       │   └── Reports.js
│       ├── utils/
│       │   └── api.js            # API request functions
│       └── router/
│           └── PrivateRoute.js   # Protect routes based on role
│   └── tailwind.config.js
│
└── package.json



Create a MERN-based QR Attendance System with a single frontend and single backend. The system supports role-based login and attendance marking using QR codes. There are three main roles: Admin, Operator, and HR. Admins have full access, while Operators and HR have restricted access. Admins login via a separate login from Operator/HR, and their credentials are manually inserted into the database. The application uses MongoDB, Express.js, React (JS, not JSX), Node.js, and Tailwind CSS, and stores profile pictures locally in a /uploads/profile_pics folder.

Backend requirements:

Create User model for Operator, HR, and regular employees, storing userId (auto-generated starting at 20001), firstName, lastName, department, role, profilePic, isSuspended.

Create OfficeMember model for Admin, storing username, password, role, inserted manually into MongoDB.

Create Counter model for auto-generating userId.

Implement authentication routes: /auth/login for Operator/HR and /admin/login for Admin.

Implement role-based middleware to protect routes based on role.

Implement user routes for registering employees (with profile picture upload using Multer), managing users (HR/Admin), suspending or removing users, and fetching user profiles.

Implement attendance routes for marking attendance via QR scan (by Operator), fetching attendance logs, and filtering/searching by userId, name, department, and date.

QR code generation for each employee on registration using their unique userId.

Frontend requirements:

A single React app with Tailwind CSS that shows/hides components and pages based on role.

Admin portal includes login page, dashboard, full user management, attendance reports, and reports export.

Operator portal includes login page, register user page (with profile picture upload and QR generation), and QR scanner page to mark attendance.

HR portal includes login page, view attendance, search users, view profiles (with profile pictures), and suspend/remove users.

Profile pictures displayed wherever user info is shown.

Role-based navigation and routing using PrivateRoute or equivalent component.

Other specifications:

Simple authentication, no JWT, no cookies. Store login state in memory or local state.

Profile pictures are stored locally; backend serves /uploads folder statically.

Admin credentials added manually to the database; example: { username: "admin1", password: "admin123", role: "admin" }.

Attendance records include userId, timestamp, department, markedBy.

Auto-generated User IDs start from 20001 and increment by 1 for each new employee.

QR codes encode the userId and optionally the employee name.

The system should be ready for deployment with both frontend and backend running on a single project.

This application allows role-based access, easy attendance marking via QR, profile management, and admin-controlled system settings, all while keeping the backend simple and storing sensitive assets like profile pictures locally.